{"ast":null,"code":"// firebase.js - Complete Firebase Configuration\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signOut, onAuthStateChanged, connectAuthEmulator } from \"firebase/auth\";\nimport { getFirestore, connectFirestoreEmulator } from \"firebase/firestore\";\nimport { getStorage, connectStorageEmulator } from \"firebase/storage\";\n\n// Your Firebase configuration (from console)\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBJBW5t-HjauGHM_Zm8EuckZpBqaWa23oI\",\n  authDomain: \"helloserve247.firebaseapp.com\",\n  projectId: \"helloserve247\",\n  storageBucket: \"helloserve247.appspot.com\",\n  // ✅ fixed\n  messagingSenderId: \"236040776331\",\n  appId: \"1:236040776331:web:9fc879e3c786585383428e\",\n  measurementId: \"G-0SNYQ3K8H9\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase Authentication and get a reference to the service\nexport const auth = getAuth(app);\n\n// Initialize Firestore\nexport const db = getFirestore(app);\n\n// Initialize Storage\nexport const storage = getStorage(app);\n\n// Configure Google Auth Provider\nexport const provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\n\n// Connect to emulators in development (optional)\nif (process.env.NODE_ENV === 'development') {\n  /*\r\n  connectAuthEmulator(auth, \"http://localhost:9099\");\r\n  connectFirestoreEmulator(db, 'localhost', 8080);\r\n  connectStorageEmulator(storage, 'localhost', 9199);\r\n  */\n}\n\n// Export auth functions\nexport { signInWithPopup, signOut, onAuthStateChanged };\n\n// Helper function for Google Sign-In\nexport const signInWithGoogle = async () => {\n  try {\n    const result = await signInWithPopup(auth, provider);\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential === null || credential === void 0 ? void 0 : credential.accessToken;\n    const user = result.user;\n    console.log('Google Sign-In Success:', {\n      user: user.displayName,\n      email: user.email,\n      uid: user.uid\n    });\n    return result;\n  } catch (error) {\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    console.error('Google Sign-In Error:', {\n      code: errorCode,\n      message: errorMessage\n    });\n    switch (errorCode) {\n      case 'auth/popup-closed-by-user':\n        throw new Error('Sign-in cancelled. Please try again.');\n      case 'auth/popup-blocked':\n        throw new Error('Popup blocked. Please allow popups and try again.');\n      case 'auth/network-request-failed':\n        throw new Error('Network error. Please check your internet connection.');\n      case 'auth/too-many-requests':\n        throw new Error('Too many failed attempts. Please try again later.');\n      default:\n        throw new Error(errorMessage || 'Sign-in failed. Please try again.');\n    }\n  }\n};\n\n// Helper function for Sign-Out\nexport const signOutUser = async () => {\n  try {\n    await signOut(auth);\n    console.log('User signed out successfully');\n    return true;\n  } catch (error) {\n    console.error('Sign-out error:', error);\n    throw new Error('Failed to sign out. Please try again.');\n  }\n};\n\n// Helper function to get current user\nexport const getCurrentUser = () => {\n  return auth.currentUser;\n};\n\n// Helper function to check if user is signed in\nexport const isUserSignedIn = () => {\n  return !!auth.currentUser;\n};\n\n// Default export\nexport default app;\n\n// Utility functions for user data\nexport const getUserData = user => {\n  if (!user) return null;\n  return {\n    uid: user.uid,\n    displayName: user.displayName,\n    email: user.email,\n    photoURL: user.photoURL,\n    emailVerified: user.emailVerified,\n    phoneNumber: user.phoneNumber,\n    creationTime: user.metadata.creationTime,\n    lastSignInTime: user.metadata.lastSignInTime\n  };\n};\n\n// Error handler for Firebase Auth errors\nexport const handleAuthError = error => {\n  const errorMessages = {\n    'auth/user-not-found': 'No user found with this email address.',\n    'auth/wrong-password': 'Incorrect password.',\n    'auth/email-already-in-use': 'An account with this email already exists.',\n    'auth/weak-password': 'Password is too weak.',\n    'auth/invalid-email': 'Invalid email address.',\n    'auth/user-disabled': 'This account has been disabled.',\n    'auth/operation-not-allowed': 'This sign-in method is not enabled.',\n    'auth/popup-closed-by-user': 'Sign-in popup was closed before completing.',\n    'auth/popup-blocked': 'Sign-in popup was blocked by the browser.',\n    'auth/network-request-failed': 'Network error occurred.',\n    'auth/too-many-requests': 'Too many unsuccessful attempts. Try again later.'\n  };\n  return errorMessages[error.code] || error.message || 'An unexpected error occurred.';\n};","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","signOut","onAuthStateChanged","connectAuthEmulator","getFirestore","connectFirestoreEmulator","getStorage","connectStorageEmulator","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","storage","provider","setCustomParameters","prompt","process","env","NODE_ENV","signInWithGoogle","result","credential","credentialFromResult","token","accessToken","user","console","log","displayName","email","uid","error","errorCode","code","errorMessage","message","Error","signOutUser","getCurrentUser","currentUser","isUserSignedIn","getUserData","photoURL","emailVerified","phoneNumber","creationTime","metadata","lastSignInTime","handleAuthError","errorMessages"],"sources":["C:/Users/acer/Downloads/helloserve_full/helloserve_project/frontend/src/firebase.js"],"sourcesContent":["// firebase.js - Complete Firebase Configuration\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { \r\n  getAuth, \r\n  GoogleAuthProvider, \r\n  signInWithPopup, \r\n  signOut, \r\n  onAuthStateChanged,\r\n  connectAuthEmulator \r\n} from \"firebase/auth\";\r\nimport { getFirestore, connectFirestoreEmulator } from \"firebase/firestore\";\r\nimport { getStorage, connectStorageEmulator } from \"firebase/storage\";\r\n\r\n// Your Firebase configuration (from console)\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBJBW5t-HjauGHM_Zm8EuckZpBqaWa23oI\",\r\n  authDomain: \"helloserve247.firebaseapp.com\",\r\n  projectId: \"helloserve247\",\r\n  storageBucket: \"helloserve247.appspot.com\",   // ✅ fixed\r\n  messagingSenderId: \"236040776331\",\r\n  appId: \"1:236040776331:web:9fc879e3c786585383428e\",\r\n  measurementId: \"G-0SNYQ3K8H9\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Initialize Firebase Authentication and get a reference to the service\r\nexport const auth = getAuth(app);\r\n\r\n// Initialize Firestore\r\nexport const db = getFirestore(app);\r\n\r\n// Initialize Storage\r\nexport const storage = getStorage(app);\r\n\r\n// Configure Google Auth Provider\r\nexport const provider = new GoogleAuthProvider();\r\nprovider.setCustomParameters({\r\n  prompt: 'select_account'\r\n});\r\n\r\n// Connect to emulators in development (optional)\r\nif (process.env.NODE_ENV === 'development') {\r\n  /*\r\n  connectAuthEmulator(auth, \"http://localhost:9099\");\r\n  connectFirestoreEmulator(db, 'localhost', 8080);\r\n  connectStorageEmulator(storage, 'localhost', 9199);\r\n  */\r\n}\r\n\r\n// Export auth functions\r\nexport { signInWithPopup, signOut, onAuthStateChanged };\r\n\r\n// Helper function for Google Sign-In\r\nexport const signInWithGoogle = async () => {\r\n  try {\r\n    const result = await signInWithPopup(auth, provider);\r\n    const credential = GoogleAuthProvider.credentialFromResult(result);\r\n    const token = credential?.accessToken;\r\n    const user = result.user;\r\n\r\n    console.log('Google Sign-In Success:', {\r\n      user: user.displayName,\r\n      email: user.email,\r\n      uid: user.uid\r\n    });\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    const errorCode = error.code;\r\n    const errorMessage = error.message;\r\n    console.error('Google Sign-In Error:', { code: errorCode, message: errorMessage });\r\n\r\n    switch (errorCode) {\r\n      case 'auth/popup-closed-by-user':\r\n        throw new Error('Sign-in cancelled. Please try again.');\r\n      case 'auth/popup-blocked':\r\n        throw new Error('Popup blocked. Please allow popups and try again.');\r\n      case 'auth/network-request-failed':\r\n        throw new Error('Network error. Please check your internet connection.');\r\n      case 'auth/too-many-requests':\r\n        throw new Error('Too many failed attempts. Please try again later.');\r\n      default:\r\n        throw new Error(errorMessage || 'Sign-in failed. Please try again.');\r\n    }\r\n  }\r\n};\r\n\r\n// Helper function for Sign-Out\r\nexport const signOutUser = async () => {\r\n  try {\r\n    await signOut(auth);\r\n    console.log('User signed out successfully');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Sign-out error:', error);\r\n    throw new Error('Failed to sign out. Please try again.');\r\n  }\r\n};\r\n\r\n// Helper function to get current user\r\nexport const getCurrentUser = () => {\r\n  return auth.currentUser;\r\n};\r\n\r\n// Helper function to check if user is signed in\r\nexport const isUserSignedIn = () => {\r\n  return !!auth.currentUser;\r\n};\r\n\r\n// Default export\r\nexport default app;\r\n\r\n// Utility functions for user data\r\nexport const getUserData = (user) => {\r\n  if (!user) return null;\r\n  return {\r\n    uid: user.uid,\r\n    displayName: user.displayName,\r\n    email: user.email,\r\n    photoURL: user.photoURL,\r\n    emailVerified: user.emailVerified,\r\n    phoneNumber: user.phoneNumber,\r\n    creationTime: user.metadata.creationTime,\r\n    lastSignInTime: user.metadata.lastSignInTime\r\n  };\r\n};\r\n\r\n// Error handler for Firebase Auth errors\r\nexport const handleAuthError = (error) => {\r\n  const errorMessages = {\r\n    'auth/user-not-found': 'No user found with this email address.',\r\n    'auth/wrong-password': 'Incorrect password.',\r\n    'auth/email-already-in-use': 'An account with this email already exists.',\r\n    'auth/weak-password': 'Password is too weak.',\r\n    'auth/invalid-email': 'Invalid email address.',\r\n    'auth/user-disabled': 'This account has been disabled.',\r\n    'auth/operation-not-allowed': 'This sign-in method is not enabled.',\r\n    'auth/popup-closed-by-user': 'Sign-in popup was closed before completing.',\r\n    'auth/popup-blocked': 'Sign-in popup was blocked by the browser.',\r\n    'auth/network-request-failed': 'Network error occurred.',\r\n    'auth/too-many-requests': 'Too many unsuccessful attempts. Try again later.'\r\n  };\r\n  \r\n  return errorMessages[error.code] || error.message || 'An unexpected error occurred.';\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}